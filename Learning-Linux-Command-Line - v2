-----------------------------------------------------------------------------------------------------
---------------------------- Learning #Linux Command Line - 2023 ------------------------------------
-----------------------------------------------------------------------------------------------------

Commands ¬ Are programs that take a particular action
Options ¬ Tell the command how to operate, often begin with a dash or minus sign (like -e or -s [commonly used by one lettter or number])
Options continue ¬ It also can have multiple options like e.g [ ls -l -a -h] best option: [ls -lah] the order doesn't matter it can be even [ls -ahl (it does the same action)]
Options continue v-3 ¬ Having options with '--' means it can't be combined together, it must have space to add another option.
Arguments ¬ This is where it tells command what part to operate on, usually its a file or path or set of files or directories.

[---------- General Commmand Syntax ----------
command     option(s)    argument(s)

  ls          -l            
  sort        -u          users.txt
---------------------------------------------]

Text Navigation Shorcuts for Command Line ---:
Ctrl-U (^U) ¬ Delete from cursor to line start
Ctrl-K (^K) ¬ Delete from cursor to line end
Ctrl-Shift-C (Ctrl^C) ¬ Copy selected text to clipboard
Ctrl-Shift-V (Ctrl^V) ¬ Paste text from clipboard
Ctrl-R (Ctrl-R) ¬ Search command history
Ctrl-C (Ctrl-C) ¬ Cancel command
----------------------------------------------

-----------------------------------------------------------------------------------------------------
---------------------------- Files, Directories and Permissions -------------------------------------
-----------------------------------------------------------------------------------------------------

[---------- Commands for file information ----------
file - determine file type 
stat - display file status
---------------------------------------------------]

[---------- Notable File System Directories ----------
- File system root: '/'
      ¬ Contains all other directories
      ¬ Highest level of the file system hierarchy

- User home directories: /home
      ¬ Location where each user's personal files are stored
      ¬ Each user has their own directory within /home/
      ¬ In Bash and many other shells, each user's own home directory is represented by the tilde '~' character
      ¬ The home directory often contains subdirectories like Documents, Downloads and Pictures

¬ Common configuration files: '/etc'
¬ Common programs or commands: /bin,/sbin
¬ Shared libraries and modules stored: '/lib'
¬ Standard location for mounting other file systems: '/mnt,/media'
¬ Kernel and system information: '/dev,/proc,' and '/sys'
---------------------------------------------------]

[---------- Paths on Linux ----------
¬ A path represents the location of a file or directory
¬ Paths use the slash character '/' as a separator between directory or file names
- Paths can be absolute or relative
      Abosulute:
      ¬ Begins from the root of the file system
      ¬ Defines an explicit location on the file system
            (example how abolute path looks)
                     /home/scott/      ---> absolute path to scott, a slash '/' at the beginning indicates an absolute path
                     /home/scott/Documents ---> absolute path to documents
      Relative:
      ¬ Begin from the current working directory
      ¬ If the current working directory changes, the path of it changes also
            (example how relative path looks)
                    Working directory: /home/scott, Relative Path: 'Documents', How it would look: /home/scott/Documents
                                      IMPORTANT: relative path doesn't have '/' in the front that would it makes relative path

      ¬ The name '..' refers to the parent directory of the current working directory
            (example how it would look)
                    Working directory: /home/scott, relative path: '..', Results abosulte path: '/home'
                    Working directory: /home/scott/Documents, relative path: '..', Results abosulte path: '/home/scott'

- Tilde Expansion
      ¬ The tilde character '~' refers to the current user's home directory
      ¬ My documents (and your documents) are at the path '~/Documents'
      ¬ The shell expands the character ~ to the path of the user's home directory
            (example how it would look)
                    '~/Documents' -> /home/scott/Documents
                    '~/Documents' -> /home/youruser/Documents
---------------------------------------------------]

[---------- Create and remove directories ----------
mkdir [name] ¬ To create a directory
mkdir [name]/[name1] ¬ To create a directory inside [name] of [name1]
rmdir ¬ To delete a directory
rmdir [name]/[name1] ¬ Deletes directory [name1] inside of [name]
---------------------------------------------]

[---------- Copy, move, and delete files and directories ----------
- Copy Files
      cp [filename] [filename2] ¬ [filename] is the file we want to copy, [filename2] is the file where we want to copy
- Move Files
      mv ¬ To move a file or to rename a file if you move the current file in the same directory
      mv [filename] animals/cat ¬ This command will move a file to the directory of cat inside animals directory
      mv [filename] animals . ¬ This command will move the file name in the current working directory or the current location path
      mv .txt* animals/cat ¬ This command will move everything related to txt from the current directory to the cat directory
- Delete Files
      rm [filename].txt ¬ This command will delete a file
      rm [filename?].txt ¬ Delete file names poems but only if it has an argument/number in the end e.g. poems5.txt [This file would be deleted]
      rm -r ¬ This command used to delete files recursively it progress through the path till it finds the directory and deletes it
------------------------------------------------------------------]

[---------- Find Files from The Command Line ----------
find . -name "peo*" ¬ This command is looking at current path directory, that's starts with [peo] it uses wild card in the end which it will show all the file names starting with [poe]
find ~/[yourdirectory] -name [*name*"] ¬ This command will look in the specified directory with start and end of [name], this will show everything after and before [name]
------------------------------------------------------]
[---------- Understand User Roles and Sudo ----------
su ¬ Command to switch from one user to another use 'it will ask for the password', e.g 'su bob'
sudo ls /root ¬ Command to switch from user to root's privileges temporary, this will show all listed files in the root directory
sudo -k ¬ Command to remove root privileges
sudo -s ¬ Command to gain root privileges
----------------------------------------------------]

[---------- Understanding File Permissions ----------
            [rwx]-user[rwx]-group[rwx]-others file1
r ¬ Read File[4]
w ¬ Write File[2]
x ¬ Execute File[1]

chmod ¬ Command changes the permission mode
chown & chgrp ¬ Commands to change the file's owner and group

- Two methods to represent permissions:
    Octal notation (like 755, 644, and 777)
        chmod 777 test.sh [This will give permission to user,group and other to 'execute, read and write to the file']
    Symbolic notation (like a=r, g+w, and o-x)
        User(u), Group(g), Others(o), and All(a) [e.g. u+rwx [user read,write, execute] or g=r [group just read], o-rwx [Other takes away read, write, execute permission]
        + ¬ Adds permissions
        - ¬ Takes permissions
        = ¬ Resets permissions to match a new permission mode
        
----------------------------------------------------]

-----------------------------------------------------------------------------------------------------
---------------------------- Common Command-Line Tasks and Tools -------------------------------------
-----------------------------------------------------------------------------------------------------

Pipes ¬ Take the output of one command and send it to another
      e.g ¬ cat users.txt | sort -u | ... --> It's just example [ '|' this is the pipe]
      Well what if I wanted to write the output of my command to two different streams? That's possible with the tee command:
      $ ls | tee peanuts.txt ---> You should see the output of ls on your screen and if you open up the peanuts.txt file you should see the same information!
      How to use it: echo "Hello world this is from command line" | wc ---> This will print 1, 6, 34 [1 = one line, 6 words, and 34 characters] 

[---------- Tools for Text ----------
cat -
¬ Concatenate means to link together.
¬ Can be used to ouput text file contents to the screen or to another program.
head, tail -
¬ Shows the first [10] lines of the file ---> head -n10 filename.txt.
¬ Shows the last [10] lines of the file ---> tail -n10 filename.txt.
e.g. cat filename.txt | cat -n | tail -n5 ---> shows filename.txt what's inside, applies number for each line and then prints out the last 5 lines in the file.
less -
¬ Displays text one page or screenful at a time and provides nagivation controls.
------------------------------------]
[---------- Search for text in files and streams with grep ----------
grep -
¬ The grep command searches files for matching patterns
¬ It's case sensitive command
e.g. cat filename.txt | grep "now" ---> This will search the word 'now' from filename.txt
e.g. grep -in "The" poems.txt ---> This will include all the words starting with 'the'
e.g. grep -vi "The" poems.txt ---> This will not include the words that start with 'the'
e.g. grep -E "[hijk]" poems.txt ---> This will look in words that have letter of 'h,i,,k'
e.g. grep -E "\w{6,}" poems.txt ---> This will look for words that has 6 characters in the word
--------------------------------------------------------------------]
[---------- Manipulate text with awk, sed, and sort ----------
awk -
¬ Often used ot extract specific text from a file according to a rule
¬ awk programs can be written at the command line or stored in a file
  e.g. awk '{print $2 "\t" $1}' simple.txt ---> This will print out two arguments $2 and $1
sed -
¬ Is a stream editor
¬ Often used for modifying text in a command pipeline or in place
  e.g. sed s/Orange/Red/ simple.txt ---> This command will change everything from word 'Orange' to 'Red' [/s stands for substitute]
sort -
¬ A command to sort in alphabetical order
¬ sort -k2 simple.txt ---> It means to sort a file in a 2nd column
¬ sort -k2 -n simple.txt ---> it means to sort a file in a 2nd column but in numeric sort
¬ sort -u simple.txt ---> It ignores the duplicates if there're multiple similar lines
rev -
¬ Prints text in reverse sequence
tac -
¬ Concatenates or displays files in reverse
tr -
¬ Translates or modifies individual characters according to parameters
--------------------------------------------------------------]
[---------- Edit text with Vim ----------
commands -
i ¬ Insert at cursor location
I ¬ Insert at beginning of line
o ¬ Insert on following line
Esc ¬ Enter command line
Esc : w ¬ Save file
Esc : w q ¬ Save and exit
Esc : q ! ¬ Exit without saving
----------------------------------------]
[---------- Working with tar and zip archives ----------
Tape archives -
¬ Put many files together into one file
¬ .tar files are common way to package and distribute software and data
¬ Data compression is optional
¬ Compressed formats: .tar.gz,.tgz,.tar.bz2
    e.g.; tar -cvf myfiles.tar filename.txt ---> ['c' letter means to create an archive, 
                                                  'v' tells tar to be verbose that is to end each file that gets added to the archive
                                                  'f' tells the tar to output the archive to a file]

    e.g.: tar -caf myfiles.taz.gz filename.txt ---> ['a' tells the tar to figure it out what kids of compression to use based of the file extenstion in this e.g. is 'gz']
    e.g.: tar -xf myfiles.tar ---> ['x' stands for extract and 'f' tells the tar the to output the archive]
    e.g.: tar -xf myfiles.tar.gz -C your/directory --> ['C' stands for in which directory the archive should be moved]

Zip -
    e.g.: zip -r zip_file_name.zip your/directory/to/zip/it[it can be relative path or absolute path]
    e.g.: unzip file_name.zip ---> This command will upzip all the file from the zip file.
    e.g.: unzip file_name.zip -d your/directory ---> ['d' this is used for unpacked destination/location]
-------------------------------------------------------]

-----------------------------------------------------------------------------------------------------
---------------------------- A Peek at Some More Advanced Topics ------------------------------------
-----------------------------------------------------------------------------------------------------

[---------- Find information about your Linux distribution ----------
ls -l /etc/*release ---> This command will show two files which are related to System information
cat /etc/*release ---> This command will show information about the distribution system

uname -a ¬ This command will show all information about the system
uname -r ¬ This command will show the exact kerner and the version is used
--------------------------------------------------------------------]
[---------- Find system hardware and disk information ---------------
free -h ¬ This will show the memory the server/device have
cat /proc/cpuinfo ---> This command is used to check the cpu information
df -h ¬ This command used to check the space of the hardware
ip a ¬ Inforamation used for networking ['a' stands for address]
--------------------------------------------------------------------]
