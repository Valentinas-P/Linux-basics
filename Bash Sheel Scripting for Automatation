-----------------------------------------------------------------------------------------------------
-- Linux System Engineer: Bash Sheel Scripting for Automatation -- 2023 -----------------------------
-----------------------------------------------------------------------------------------------------
2 methods of using debugging in Linux:

1. bash -x ~/bin/script.sh [--> script.sh is the file name of the [script]] (uses the debugger for entire of the script)
2. using second option only allows us to debug only a portion of the script. By turning on --> {set -x} and off --> {set +x}.

-----------------EXAMPLE---------------------
#!/bin/bash
set -x [This sex -x will {turn-on} the debugger]
for i in {1..10} ;do
  echo $1
done
set +x [This will {turn-off} the debugger]
---------------------------------------------

Bash variable has 4 scopes:
1. Environmental variables - The entire OS can see, this variables are set in the system when it starts
2. Variables in scripts - Which can be seen by any function, command or in the script. Standard var: VAR=10
3. Variables that are exported - All sub processes and sub shells run by the script.
---------------EXAMPLE---------------
VAR=10
export VAR [export variable]
-------------------------------------

4. Local Variables
--------------EXAMPLE----------------
testfunction()
{
  local DATA
  echo $DATA
}
-------------------------------------

Script example of using positional arguments -->
--------------EXAMPLE----------------
script name: posargs

#!/bin/bash

echo '$0' "$0" ----> 0 [your directory to script]
echo '$1' "$1" ----> 1 [first argument]
echo '$2' "$2" ----> 2 [second argument]
echo '$@' "$@" ----> @ [means all arguments you input]
echo '$*' "$*" ----> * [means all arguments you input]

if you write: ./posargs dog cat house
It will print out:
--------------------------------------
$0 is [your/script/directory/location]
$1 is dog
$2 is cat
$@ is dog cat horse
%* is dog cat horse
--------------------------------------

Load files using while read loop ---->
--------------EXAMPLE----------------
script name: whileread

#!/bin/bash

while IFS= read -r LINE; do
  echo "$LINE"
done < "$1"
-------------------------------------

If you write: ./whileread /etc/passwd ---> You will receive an information of the file where you able to read it

-------------- ADVANCED EXAMPLE----------------
script name: passarray

#!/bin/bash
                                [Does the same action as load file using while read loop method.]
declare -a passarray
mapfile passarray < "$1"
echo ${passarray[@]}
-------------------------------------

Promt for input --->
--------------EXAMPLE----------------
#!/bin/bash
                                         [Asks for the user to input data, it prints out your name is "name"]
                                         Read options: -r [Backslash is not an escape character],
                                                       -t [Time out if reading from stdin],
                                                       -s [Don't echo typed characters]
read -p "What's is your name" username
echo "Your name is $username"
-------------------------------------
Process shell options -->
--------------EXAMPLE----------------
script name: getops.sh

while getopts ":a:" opt; do
      case $opt in
            a) echo "You passed the -a option with the $OPTARG argument" >&2 ;;
            :) echo "Option $opt requires an argument" >&2 ; exit 1 ;;
           /?) echo "Invalid option: -$opt" > &2 ;;
      esac
done
shift $((OPTIND-1))
echo '$1 is' "$1"
-------------------------------------

-----------------------------------------------------------------------------------------------------
------------------------------------ Outputting data from the script --------------------------------
-----------------------------------------------------------------------------------------------------

echo "data" > file.txt ---> this ">" symbol means to overwrite to the file.txt
echo "data" | tee file.txt [Displaying on the screen and overwriting a file "use 'tee' command"] 
echo "data" >> file.txt ---> this ">>" symbol means to append a file
echo "data" | tee -a file.txt [Displaying on the screen and appending a file "use 'tee -a' command]

------------- Create temporary file ------------>

tmpfile=$(mktemp -t script.XXXXXX)
echo "message" >> $tmpfile

------------- Create unique file names with template ------>
mktemp -t script.XXXXXX
/tmp/script.J0chLz [Outcome example]

-----------------------------------------------------------------------------------------------------
------------------------------------ Bash Scripting Logic -------------------------------------------
--------------EXAMPLE--------------------------------------------------------------------------------
if, else if, else conditional ----->

if <condition> ;then
  <run code>
elif <condition> ;then
  <run code>
else
  <run code>
fi
-------------------------------------
--------------EXAMPLE----------------
Conditional flow with case --------->

case $AGE in
        [1-9]) echo "You are quite young" ;;& [it checks condition and if the condition is true it doesn't terminates because of '&' symbol, but it carries on with another condition [5-9].]
        [5-9]) echo "Time for elementary school" ;; [this would check if condition is true or not and it terminates no matter what condition it is]
       1[0-9]) echo "Time for middle school" ;& [it checks if condition is true and continues with rest of it]
   [2-9][0-9]) echo "You are an adult" ;;
            *) echo "That doesn't seem to be an age" [if any of the conditions didn't match then displays this message]
esac
-------------------------------------
Numeric Comparison Operators ------>
if [[ 1 -lt 5 ]] ['lt' stands for less than]
if [[ 1 -gt 5 ]] ['gt' stands for greater than]
if [[ 1 -eq 5 ]] ['eq' stands for equal]
if [[ 1 -le 5 ]] ['le' stands for less than or equal]
if [[ 1 -ge 5 ]] ['ge' stands for greater than or equal]
Not Numeric Comparison Operators ----->
if [[ 1 > 5 ]] ['>' greater than]
if [[ 1 < 5 ]] ['<' less than]
if [[ 1 = 5 ]] ['=' equal]

--------------EXAMPLE----------------
#!/bin/bash

if (($1 > $2)) ;then
        echo "The first argument is larger than the second"
else
        echo "The second argument is larger than the first"
fi

sum=$(($1+$2))
if [[ "$sum" -ge 10 ]] ;then
        echo "The sum of the first two argument is greater than or equal to 10"
else
        echo "The sum of the first two arguments is less than 10"
fi

if you type: ./numericscript.sh 5 1 [this is the way you can check if the script is working]
-------------------------------------
